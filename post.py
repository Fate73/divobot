import os
import csv
from datetime import datetime
import pytz
import requests
from telegram import Bot

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
USER_ID = os.getenv('USER_ID')
HF_TOKEN = os.getenv('HF_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CSV_FILE = "topic.csv"
TIMEZONE = pytz.timezone('Europe/Moscow')

def get_next_topic():
    topics = []
    next_row = None
    next_idx = None

    # –ß–∏—Ç–∞–µ–º CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ;
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f, delimiter=';')
        for idx, row in enumerate(reader):
            topics.append(row)
            if not next_row and (row.get("–°—Ç–∞—Ç—É—Å", "").strip() == "" or row.get("–°—Ç–∞—Ç—É—Å", "").strip().lower() == "–Ω–æ–≤–∞—è"):
                next_row = row
                next_idx = idx

    if next_row is None:
        return None, topics, None

    return next_row, topics, next_idx

def mark_topic_used(topics, idx):
    now = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
    topics[idx]["–°—Ç–∞—Ç—É—Å"] = "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞"
    topics[idx]["–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"] = now

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ CSV
    with open(CSV_FILE, "w", encoding="utf-8", newline='') as f:
        writer = csv.DictWriter(f, fieldnames=topics[0].keys(), delimiter=';')
        writer.writeheader()
        writer.writerows(topics)

def generate_post(topic, category):
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏)
    examples = [
        "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ —É –æ—Å—å–º–∏–Ω–æ–≥–∞ —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞, –∏ –¥–≤–∞ –∏–∑ –Ω–∏—Ö –ø–µ—Ä–µ—Å—Ç–∞—é—Ç –±–∏—Ç—å—Å—è, –∫–æ–≥–¥–∞ –æ–Ω –ø–ª—ã–≤—ë—Ç?",
        "–í –≥–ª—É–±–∏–Ω–∞—Ö –æ–∫–µ–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä—ã–±—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–≤–µ—Ç—è—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–≤–µ—Ç–æ–º ‚Äî —ç—Ç–æ –±–∏–æ–ª—é–º–∏–Ω–µ—Å—Ü–µ–Ω—Ü–∏—è.",
    ]
    prompt = (
        f"{examples[0]}\n"
        f"{examples[1]}\n"
        f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π —Ñ–∞–∫—Ç –Ω–∞ —Ç–µ–º—É: '{topic}' (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category}). "
        "–ü–∏—à–∏ –≤ —Å—Ç–∏–ª–µ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞, –∏–∑–±–µ–≥–∞–π –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π. –ï—â—ë –æ–¥–∏–Ω —Ñ–∞–∫—Ç:"
    )

    url = "https://api-inference.huggingface.co/models/sberbank-ai/rugpt3large_based_on_gpt2"
    headers = {
        "Authorization": f"Bearer {HF_TOKEN}",
        "Content-Type": "application/json"
    }
    data = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 120,
            "do_sample": True,
            "temperature": 1.0,
            "top_p": 0.9,
            "repetition_penalty": 1.2,
        }
    }
    response = requests.post(url, headers=headers, json=data, timeout=60)
    response.raise_for_status()
    result = response.json()
    # HuggingFace –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ-—Ä–∞–∑–Ω–æ–º—É, –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞:
    if isinstance(result, list) and "generated_text" in result[0]:
        return result[0]["generated_text"].strip()
    elif isinstance(result, dict) and "generated_text" in result:
        return result["generated_text"].strip()
    else:
        return str(result)

def main():
    next_row, topics, idx = get_next_topic()
    if not next_row:
        print("–¢–µ–º—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª topic.csv.")
        return

    topic = next_row["–¢–µ–º–∞"]
    category = next_row.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "")
    post = generate_post(topic, category)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    bot = Bot(token=TOKEN)
    now = datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M")
    text = (
        f"üåü –ù–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n"
        f"–¢–µ–º–∞: {topic}\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"{post}\n\n"
        f"–í—Ä–µ–º—è: {now} (–ú–°–ö)"
    )
    bot.send_message(chat_id=USER_ID, text=text)

    # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–º—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
    mark_topic_used(topics, idx)
    print(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Ç–µ–º–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è: {topic}")

if __name__ == "__main__":
    main()
